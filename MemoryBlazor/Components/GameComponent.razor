@using MemoryBlazor.Components.Pages
@using System.Collections.Concurrent
<div class="BoardTable">

    @if (Game is not null && Game.State != GameState.Over)
    {
        <div>
            <span>Number of moves: @Game.MovesCount</span>
            <h2>Seconds Left: @Timer</h2>
        </div>
        <div>
            @foreach (var gameCard in Cards)
            {
                <ClickableCard GameCard="gameCard"
                               OnClicked="@( click => HandleCardClick(click))" />
            }
        </div>
    }
    else if (Game is not null)
    {
        <h1>@Game.Result?.DisplayResult()</h1>
    }
</div>
<div class="row">
    <div>
        <select @onchange="HandleDifficultyChange">
            <option value="Restart">Restart</option>
            <option value="Easy">Easy</option>
            <option value="Medium">Medium</option>
            <option value="Impossible">Impossible</option>
        </select>
    </div>
</div>

@code {
        [Parameter] public Difficulty Difficulty { get; set; }
    public int Timer { get; private set; }
    private Game Game { get; set; }
    private List<GameCard> Cards { get; set; } = new();
    private ConcurrentQueue<ClickableCard> clickedCards = [];

    protected override void OnParametersSet()
    {
        Game = Game.Initialize(Difficulty);
        Cards = Game.Board.GetGameBoard
        .Select(card => new GameCard(card)).ToList();
        base.OnParametersSet();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Game.TimerElapsed += OnTimerElapsed;
        }
        base.OnAfterRender(firstRender);
    }

    private void OnTimerElapsed(Object? sender, int args)
    {
        InvokeAsync(() =>
        {
            Timer = args;
            StateHasChanged();
        });
    }

    private void Restart(Difficulty difficulty)
    {
        Game.UnsubscribeFromTimerElapsed();
        Game.TimerElapsed -= OnTimerElapsed;
        Game = Game.Initialize(difficulty);
        Cards = Game.Board.GetGameBoard
        .Select(card => new GameCard(card)).ToList();
        StateHasChanged();
        Game.TimerElapsed += OnTimerElapsed;
    }

    private void HandleCardClick(Object component)
    {
        if (component is null) return;

        var clickedCard = component as ClickableCard ??
        throw new Exception("Ops! Something went wrong");

        if (clickedCards.Count < 1)
        {
            clickedCards.Enqueue(clickedCard);
        }
        else if (clickedCards.Count >= 2)
        {
            foreach (var cardClicked in clickedCards) cardClicked.GameCard.Reveald = false;
            clickedCards.Clear();
            clickedCards.Enqueue(clickedCard);
        }
        else
        {
            var firstClicked = clickedCards.First();
            if (Game.MakeMove(firstClicked.GameCard.Card, clickedCard.GameCard.Card))
            {
                firstClicked.GameCard.Hidden = true;
                clickedCard.GameCard.Hidden = true;
                clickedCards.Clear();
            }
            else
            {
                clickedCards.Enqueue(clickedCard);
            }
        }

    }

    private void HandleDifficultyChange(ChangeEventArgs e)
    {
        switch (e?.Value?.ToString())
        {
            case "Easy": Restart(Difficulty.Easy); break;
            case "Medium": Restart(Difficulty.Medium); break;
            case "Impossible": Restart(Difficulty.Impossible); break;
            default: Restart(Difficulty); break;
        }
    }

}
